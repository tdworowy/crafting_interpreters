context free grammar:
expression -> literal | unary | binary | grouping;
literal -> NUMBER | STRING | "true" | "false" | "nil";
grouping -> "(" expression ")";
unary -> ("-" | "!") expression;
binary -> expression operator expression;
operator -> "==" | "!=" | "<" | "<=" | ">" | ">=" | "+" | "-" | "*" | "/;

Precedence table:
program -> statement* EOF;
declaration -> varDecl | statement;
statement -> exprStmt | printStmt | block;
block -> "{" declaration* "}";
varDecl -> "var" IDENTIFIER ("=" expression)?";";
exprStmt -> expression ";";
printStmt -> "print" expression ";";
expression -> equality;
assignment -> IDENTIFIER "=" assignment | equality;
equality -> comparison (( "!=" | "==" ) comparison )*;
comparison -> term (( ">" | ">=" | "<" | "<=") term )*;
term -> factor (( "-" | "+" ) factor )*;
factor -> unary (( "/" | "*") unary )*;
unary ->  ("-" | "!") unary | primary;
primary -> NUMBER | STRING | "true" | "false" | "nil" |  "(" expression ")" | IDENTIFIER;
