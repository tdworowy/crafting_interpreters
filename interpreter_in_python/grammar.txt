context free grammar:
expression -> literal | unary | binary | grouping;
literal -> NUMBER | STRING | "true" | "false" | "nil";
grouping -> "(" expression ")";
unary -> ("-" | "!") expression;
binary -> expression operator expression;
operator -> "==" | "!=" | "<" | "<=" | ">" | ">=" | "+" | "-" | "*" | "/;

Precedence table:
program -> statement* EOF;
declaration -> clssDecl | funcDecl | varDecl | statement;
statement -> exprStmt | forStmt | ifStmt | printStmt | returnStmt | whileStmt | block;
forStmt -> "for" "(" (varDecl | exprStmr | ";") expression? ";" expression? ")" statement;
returnStmt -> return expression? ";";
whileStmt -> "while" "(" expression ")" statement;
ifStmt -> "if" "(" expression ")" statement ("else" statement)?;
classDecl -> "class" IDENTIFIER ("<" IDENTIFIER)? "{" function* "}";
funcDecl -> "fun" function;
function -> IDENTIFIER "(" parameters? ")" block;
parameters -> IDENTIFIER ( "," IDENTIFIER)*;
block -> "{" declaration* "}";
varDecl -> "var" IDENTIFIER ("=" expression)?";";
exprStmt -> expression ";";
printStmt -> "print" expression ";";
expression -> assignment;
assignment -> (call ".")? IDENTIFIER "=" assignment | logic_or;
logic_or -> logic_and ( "or" logic_and)*;
logic_and -> equality ( "and" equality)*;
equality -> comparison (( "!=" | "==" ) comparison )*;
comparison -> term (( ">" | ">=" | "<" | "<=") term )*;
term -> factor (( "-" | "+" ) factor )*;
factor -> unary (( "/" | "*") unary )*;
unary ->  ("-" | "!") unary | call;
call -> primary ( "(" arguments? ")" | "." IDENTIFIER )*;
arguments -> expression ( "," expression)*;
primary -> NUMBER | STRING | "true" | "false" | "nil" |  "(" expression ")" | IDENTIFIER | "super" "." IDENTIFIER;
